{"meta":{"title":"曲达的博客","subtitle":"Stay hungry. Stay foolish.","description":"沉下去，记录点滴，每天进步一点点。涉猎JS、CSS、HTML、VUE、REACT、RN。","author":"曲达","url":"http://quda.me"},"pages":[{"title":"about","date":"2017-02-07T08:25:48.000Z","updated":"2017-02-07T08:25:48.000Z","comments":true,"path":"about/index.html","permalink":"http://quda.me/about/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-07T08:26:01.000Z","updated":"2017-02-07T11:05:50.000Z","comments":true,"path":"categories/index.html","permalink":"http://quda.me/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-02-07T08:25:54.000Z","updated":"2017-02-07T08:32:34.000Z","comments":false,"path":"tags/index.html","permalink":"http://quda.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"call与apply的区别","slug":"The-difference-between-the-call-and-apply","date":"2017-02-07T03:57:06.000Z","updated":"2017-02-07T04:00:05.000Z","comments":true,"path":"2017/02/07/The-difference-between-the-call-and-apply/","link":"","permalink":"http://quda.me/2017/02/07/The-difference-between-the-call-and-apply/","excerpt":"","text":"call 和 apply 都是为了改变某个函数运行时的 context 即上下文而存在的，换句话说，就是为了改变函数体内部 this 的指向。因为 JavaScript 的函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。 二者的作用完全一样，只是接受参数的方式不太一样。例如，有一个函数 func1 定义如下： var func1 = function(arg1, arg2) {}; 就可以通过 func1.call(this, arg1, arg2); 或者 func1.apply(this, [arg1, arg2]); 来调用。其中 this 是你想指定的上下文，他可以任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。 JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时，用 call，而不确定的时候，用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来便利所有的参数。 123456789101112131415161718192021222324252627282930313233function cat()&#123;&#125;cat.prototype=&#123; food:\"fish\", say: function()&#123; alert(\"I love \"+this.food); &#125;, name: function( name )&#123; console.log('my name is ' + name) &#125;&#125;var blackCat = new cat;blackCat.say();blackCat.name('miaomiao')var whiteDog = &#123; food:\"bone\", say: function()&#123; blackCat.say.call(this) &#125;, name: function( name )&#123; blackCat.name.call(this, name) //blackCat.name.apply(this, [name]) &#125;&#125;whiteDog.say() //bonewhiteDog.name('wangwang')//wangwang//whiteDog中不需要重新定义say方法，直接调用即可","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://quda.me/tags/js/"},{"name":"learn","slug":"learn","permalink":"http://quda.me/tags/learn/"}]}]}